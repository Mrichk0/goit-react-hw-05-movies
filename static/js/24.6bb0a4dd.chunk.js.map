{"version":3,"file":"static/js/24.6bb0a4dd.chunk.js","mappings":"sMAIMA,EAAY,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACbC,GAAWC,EAAAA,EAAAA,MACXC,EAAWH,EAAMI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACzB,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAeG,MAAO,CAAEC,KAAMR,GAAnD,UACE,yBACE,wBAAKK,OAFuBD,MAMlC,OAAO,wBAAKF,KAGd,IAEAJ,EAAUW,aAAe,CACvBV,MAAO,K,4JCQT,EAxBwB,SAAC,GAAkB,IAAhBW,EAAe,EAAfA,SACzB,GAA0BC,EAAAA,EAAAA,UAAS,CACjCC,MAAO,KADT,eAAOL,EAAP,KAAcM,EAAd,KAeQD,EAAUL,EAAVK,MAER,OACE,iBAAME,OAAO,GAAGJ,SATG,SAAAK,GACnBA,EAAEC,iBACFN,GAAS,UAAKH,IACdM,EAAS,CAAED,MAAO,MAMlB,UACE,kBAAOK,MAAOL,EAAOM,KAAK,OAAOC,KAAK,QAAQC,SAf7B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACdF,EAAgBE,EAAhBF,KAAMF,EAAUI,EAAVJ,MACdJ,GAAS,SAAAS,GAAS,yBAAUA,GAAV,cAAsBH,EAAOF,a,mBCwCnD,EA3CoB,WAClB,OAA0BN,EAAAA,EAAAA,UAAS,CACjCZ,MAAO,GACPwB,SAAS,EACTC,MAAO,OAHT,eAAOC,EAAP,KAAcC,EAAd,KAMA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,6FACjBL,GAAS,SAAAJ,GAAS,yBAAUA,GAAV,IAAqBC,SAAS,OAD/B,mBAGWS,EAAAA,EAAAA,IAAYJ,EAAaK,IAAI,UAHxC,gBAGPC,EAHO,EAGPA,QACRR,GAAS,SAAAJ,GAAS,yBACbA,GADa,IAEhBC,SAAS,EACTxB,MAAOmC,OAPM,gDAUfR,GAAS,SAAAJ,GAAS,yBACbA,GADa,IAEhBC,SAAS,EACTC,MAAO,KAAMW,aAbA,yDAAH,qDAiBZP,EAAaK,IAAI,UACnBF,MAED,CAACH,IAMJ,OACE,iCACE,SAAC,EAAD,CAAiBlB,SANJ,SAAC,GAAe,IAAbE,EAAY,EAAZA,MAClBiB,EAAgB,CAAEjB,MAAAA,QAMhB,SAACd,EAAA,EAAD,CAAWC,MAAO0B,EAAM1B,YCnC9B,EATmB,WACjB,OACE,4BACE,oCACA,SAAC,EAAD,S,gMCJAqC,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAa,mCAAG,sGACJL,EAASH,IAAI,sBADT,uBACnBS,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,qDAKbC,EAAY,mCAAG,WAAMvC,GAAN,uFACPgC,EAASH,IAAT,iBAAuB7B,IADhB,cACpBsC,EADoB,yBAGnBA,GAHmB,2CAAH,sDAMZV,EAAW,mCAAG,WAAMpB,GAAN,yFACFwB,EAASH,IAAI,gBAAiB,CACnDM,OAAQ,CACN3B,MAAAA,KAHqB,uBACjB8B,EADiB,EACjBA,KADiB,kBAOlBA,GAPkB,2CAAH,sDAUXE,EAAe,mCAAG,WAAMxC,GAAN,yFACNgC,EAASH,IAAT,iBAAuB7B,EAAvB,aADM,uBACrBsC,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfG,EAAc,mCAAG,WAAMzC,GAAN,yFACLgC,EAASH,IAAT,iBAAuB7B,EAAvB,aADK,uBACpBsC,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH","sources":["components/MovieList/MovieList.jsx","components/MovieSearchForm/MovieSearchForm.jsx","components/MovieSearch/MovieSearch.jsx","pages/MoviesPage/MoviePage.jsx","shared/api/films.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ items }) => {\n  const location = useLocation();\n  const elements = items.map(({ id, title }) => (\n    <Link to={`/movies/${id}`} key={id} state={{ from: location }}>\n      <li>\n        <h4>{title}</h4>\n      </li>\n    </Link>\n  ));\n  return <ul>{elements}</ul>;\n};\n\nexport default MovieList;\n\nMovieList.defaultProps = {\n  items: [],\n};\n\nMovieList.propTypes = {\n  data: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n  }),\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst MovieSearchForm = ({ onSubmit }) => {\n  const [state, setState] = useState({\n    query: '',\n  });\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({ query: '' });\n  };\n\n  const { query } = state;\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit}>\n      <input value={query} type=\"text\" name=\"query\" onChange={handleChange} />\n    </form>\n  );\n};\nexport default MovieSearchForm;\n\nMovieSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport MovieSearchForm from 'components/MovieSearchForm';\nimport MovieList from 'components/MovieList';\nimport { searchMovie } from 'shared/api/films';\n\nconst MovieSearch = () => {\n  const [movie, setMovie] = useState({\n    items: [],\n    loading: false,\n    error: null,\n  });\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      setMovie(prevState => ({ ...prevState, loading: true }));\n      try {\n        const { results } = await searchMovie(searchParams.get('query'));\n        setMovie(prevState => ({\n          ...prevState,\n          loading: false,\n          items: results,\n        }));\n      } catch (error) {\n        setMovie(prevState => ({\n          ...prevState,\n          loading: false,\n          error: error.message,\n        }));\n      }\n    };\n    if (searchParams.get('query')) {\n      fetchMovie();\n    }\n  }, [searchParams]);\n\n  const onSubmit = ({ query }) => {\n    setSearchParams({ query });\n  };\n\n  return (\n    <>\n      <MovieSearchForm onSubmit={onSubmit} />\n      <MovieList items={movie.items} />\n    </>\n  );\n};\nexport default MovieSearch;\n","import MovieSearch from 'components/MovieSearch';\n\nconst MoviesPage = () => {\n  return (\n    <div>\n      <h1>Movies</h1>\n      <MovieSearch />\n    </div>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'bca34bbfc009d7fec4acd7837db1b38e',\n  },\n});\n\nexport const trendingMovie = async () => {\n  const { data } = await instance.get('trending/movie/day');\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const data = await instance.get(`/movie/${id}`);\n\n  return data;\n};\n\nexport const searchMovie = async query => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n\n  return data;\n};\n\nexport const getMovieCredits = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const getMovieReview = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n};\n"],"names":["MovieList","items","location","useLocation","elements","map","id","title","to","state","from","defaultProps","onSubmit","useState","query","setState","action","e","preventDefault","value","type","name","onChange","target","prevState","loading","error","movie","setMovie","useSearchParams","searchParams","setSearchParams","useEffect","fetchMovie","searchMovie","get","results","message","instance","axios","baseURL","params","api_key","trendingMovie","data","getMovieById","getMovieCredits","getMovieReview"],"sourceRoot":""}